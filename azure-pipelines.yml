trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

pr:
- master

stages:

- stage: build
  displayName: build

  variables:
    sdkVersion: 3.1.102
    solutionPath: ./Project1/*.sln
    buildConfiguration: Release
    dotnetSdkVersion: '3.1.102'

  jobs:

  - job: build
    displayName: build

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: UseDotNet@2
      displayName: 'Install .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.102
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core SDK 3.1.102'
      inputs:
        version: '3.1.102'

    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: 3.1.102
      displayName: dotnet 3.1.102

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: './Project1/*.sln'
        feedsToUse: 'select'
        vstsFeed: '9f33db03-6ee0-4e3c-b45e-5353f9f1f51d'

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: true
        arguments:
          --configuration $(buildConfiguration)
          --output $(Build.ArtifactStagingDirectory)/publish
        modifyOutputPath: false
        zipAfterPublish: false
      displayName: dotnet publish

    - publish: $(Build.ArtifactStagingDirectory)/publish
      artifact: app
      displayName: artifact publish app

  - job: test
    displayName: test

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonarcloud-PStewart1'
        organization: '2002-feb24-net'
        scannerMode: 'MSBuild'
        projectKey: '2002-feb24-net_pauls-project1'
        projectName: 'Pauls-Project1'
        extraProperties: |
          sonar.exclusions=**/lib/**
      continueOnError: true
      displayName: sonarcloud analysis prepare

    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: 3.1.102
      displayName: dotnet 3.1.102

    - script: dotnet build $(solutionPath)
        --configuration $(buildConfiguration)
      displayName: dotnet build

    - script: dotnet test $(solutionPath)
        --configuration $(buildConfiguration)
        --collect "XPlat Code Coverage"
        --logger trx
        --no-build
        --results-directory $(Common.TestResultsDirectory)
      continueOnError: true
      displayName: dotnet test

    - task: SonarCloudAnalyze@1
      continueOnError: true
      displayName: sonarcloud analysis run

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: $(Common.TestResultsDirectory)/*.trx
      displayName: test results build publish

    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml
      displayName: code coverage build publish
    
    - task: SonarCloudPublish@1
      condition: succeededOrFailed()
      displayName: sonarcloud results build publish

- stage: deploy
  displayName: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: build

  jobs:

  - deployment: deploy_dev
    displayName: deploy dev

    pool:
      vmImage: ubuntu-latest

    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            artifact: app
            displayName: artifact download app

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure subscription 1(4)(34c1f765-2be7-443c-b6cc-1dfb59828d08)'
              appType: 'webApp'
              WebAppName: 'GoodBurger'
              packageForLinux: '$(Pipeline.Workspace)/app'
            displayName: Website Deployment